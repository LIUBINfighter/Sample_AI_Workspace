/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Latexocr
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var { spawn } = require("child_process");
var DEFAULT_SETTINGS = {
  statusBarVisible: true
};
var Latexocr = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    if (this.settings.statusBarVisible) {
      this.statusBarTextElement = this.addStatusBarItem();
      this.statusBarTextElement.setText("latexocr not running");
    }
    this.numWindows = 0;
    this.addCommand({
      id: "run_latexocr",
      name: "Run latexocr",
      callback: () => {
        this.run_latexocr();
      }
    });
    this.addRibbonIcon("braces", "latexocr", () => {
      this.run_latexocr();
    });
    this.addSettingTab(new SettingsTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async run_latexocr() {
    const latexocr_process = spawn("latexocr");
    new import_obsidian.Notice("latexocr running");
    this.numWindows += 1;
    this.setStatusBarText();
    latexocr_process.on("close", () => {
      new import_obsidian.Notice(`latexocr closed`);
      this.numWindows -= 1;
      this.setStatusBarText();
    });
  }
  async setStatusBarText() {
    let statusBarText = "";
    if (this.settings.statusBarVisible) {
      if (this.numWindows > 0) {
        statusBarText = "latexocr running";
      } else {
        statusBarText = "latexocr not running";
      }
      this.statusBarTextElement.setText(statusBarText);
    } else {
      this.statusBarTextElement.setText("");
    }
  }
};
var SettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Show status in status bar").setDesc("Controls whether latexocr running status is shown in the Obsidian status bar").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.statusBarVisible).onChange(async (value) => {
        this.plugin.settings.statusBarVisible = value;
        this.plugin.setStatusBarText();
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBOb3RpY2UsIFBsdWdpbiwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZyB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgbm9ybWFsaXplIH0gZnJvbSAncGF0aCc7XHJcbmNvbnN0IHsgc3Bhd24gfSA9IHJlcXVpcmUoXCJjaGlsZF9wcm9jZXNzXCIpO1xyXG5cclxuaW50ZXJmYWNlIExhdGV4b2NyU2V0dGluZ3Mge1xyXG4gICAgc3RhdHVzQmFyVmlzaWJsZTogYm9vbGVhbjtcclxufVxyXG5cclxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogTGF0ZXhvY3JTZXR0aW5ncyA9IHtcclxuICAgIHN0YXR1c0JhclZpc2libGU6IHRydWVcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExhdGV4b2NyIGV4dGVuZHMgUGx1Z2luIHtcclxuICAgIHNldHRpbmdzOiBMYXRleG9jclNldHRpbmdzO1xyXG4gICAgbnVtV2luZG93czogbnVtYmVyOyAvLyBjb3VudCBvZiBsYXRleG9jciB3aW5kb3dzIG9wZW5cclxuICAgIHN0YXR1c0JhclRleHRFbGVtZW50OiBIVE1MRWxlbWVudDtcclxuXHJcbiAgICBhc3luYyBvbmxvYWQoKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcclxuXHJcbiAgICAgICAgLy8gYWRkIHN0YXR1cyBiYXIgdGV4dFxyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnN0YXR1c0JhclZpc2libGUpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0dXNCYXJUZXh0RWxlbWVudCA9IHRoaXMuYWRkU3RhdHVzQmFySXRlbSgpO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXR1c0JhclRleHRFbGVtZW50LnNldFRleHQoJ2xhdGV4b2NyIG5vdCBydW5uaW5nJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubnVtV2luZG93cyA9IDA7XHJcbiAgICAgICAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQWRkIGNvbW1hbmRcclxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xyXG4gICAgICAgICAgICBpZDogJ3J1bl9sYXRleG9jcicsXHJcbiAgICAgICAgICAgIG5hbWU6ICdSdW4gbGF0ZXhvY3InLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ydW5fbGF0ZXhvY3IoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBBZGQgYnV0dG9uIGluIGxlZnQgcmliYm9uXHJcbiAgICAgICAgdGhpcy5hZGRSaWJib25JY29uKCdicmFjZXMnLCAnbGF0ZXhvY3InLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucnVuX2xhdGV4b2NyKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFRoaXMgYWRkcyBhIHNldHRpbmdzIHRhYiBzbyB0aGUgdXNlciBjYW4gY29uZmlndXJlIHZhcmlvdXMgYXNwZWN0cyBvZiB0aGUgcGx1Z2luXHJcbiAgICAgICAgdGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBTZXR0aW5nc1RhYih0aGlzLmFwcCwgdGhpcykpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBvbnVubG9hZCgpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgbG9hZFNldHRpbmdzKCkge1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcclxuICAgICAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHJ1bl9sYXRleG9jcigpIHtcclxuICAgICAgICAvLyBSdW5zIGxhdGV4b2NyXHJcbiAgICAgICAgLy8gVXBkYXRlcyBzdGF0dXMgYmFyIHRleHQgYW5kIHNlbmRzIG5vdGljZXMgZm9yIG9wZW5lbmluZyBhbmQgY2xvc2luZ1xyXG4gICAgICAgIGNvbnN0IGxhdGV4b2NyX3Byb2Nlc3MgPSBzcGF3bihcImxhdGV4b2NyXCIpO1xyXG5cclxuICAgICAgICBuZXcgTm90aWNlKFwibGF0ZXhvY3IgcnVubmluZ1wiKTtcclxuICAgICAgICB0aGlzLm51bVdpbmRvd3MgKz0gMTtcclxuICAgICAgICB0aGlzLnNldFN0YXR1c0JhclRleHQoKTtcclxuXHJcbiAgICAgICAgbGF0ZXhvY3JfcHJvY2Vzcy5vbihcImNsb3NlXCIsICgpID0+IHtcclxuICAgICAgICAgICAgbmV3IE5vdGljZShgbGF0ZXhvY3IgY2xvc2VkYCk7XHJcbiAgICAgICAgICAgIHRoaXMubnVtV2luZG93cyAtPSAxO1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXR1c0JhclRleHQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBzZXRTdGF0dXNCYXJUZXh0KCkge1xyXG5cclxuICAgICAgICAvLyBJZiB3ZSBhcmUgc2hvd2luZyBzdGF0dXMgYmFyIHRleHQsIHVwZGF0ZSBpdCBhcyBhcHByb3ByaWF0ZVxyXG4gICAgICAgIGxldCBzdGF0dXNCYXJUZXh0ID0gJyc7XHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3Muc3RhdHVzQmFyVmlzaWJsZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5udW1XaW5kb3dzID4gMCkge1xyXG4gICAgICAgICAgICAgICAgc3RhdHVzQmFyVGV4dCA9ICdsYXRleG9jciBydW5uaW5nJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN0YXR1c0JhclRleHQgPSAnbGF0ZXhvY3Igbm90IHJ1bm5pbmcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzQmFyVGV4dEVsZW1lbnQuc2V0VGV4dChzdGF0dXNCYXJUZXh0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzQmFyVGV4dEVsZW1lbnQuc2V0VGV4dCgnJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgU2V0dGluZ3NUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuICAgIHBsdWdpbjogTGF0ZXhvY3I7XHJcblxyXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogTGF0ZXhvY3IpIHtcclxuICAgICAgICBzdXBlcihhcHAsIHBsdWdpbik7XHJcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XHJcbiAgICB9XHJcblxyXG4gICAgZGlzcGxheSgpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzO1xyXG5cclxuICAgICAgICBjb250YWluZXJFbC5lbXB0eSgpO1xyXG5cclxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgICAgICAgLnNldE5hbWUoJ1Nob3cgc3RhdHVzIGluIHN0YXR1cyBiYXInKVxyXG4gICAgICAgICAgICAuc2V0RGVzYygnQ29udHJvbHMgd2hldGhlciBsYXRleG9jciBydW5uaW5nIHN0YXR1cyBpcyBzaG93biBpbiB0aGUgT2JzaWRpYW4gc3RhdHVzIGJhcicpXHJcbiAgICAgICAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT5cclxuICAgICAgICAgICAgICAgIHRvZ2dsZVxyXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zdGF0dXNCYXJWaXNpYmxlKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Muc3RhdHVzQmFyVmlzaWJsZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXRTdGF0dXNCYXJUZXh0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUErRDtBQUUvRCxJQUFNLEVBQUUsTUFBTSxJQUFJLFFBQVEsZUFBZTtBQU16QyxJQUFNLG1CQUFxQztBQUFBLEVBQ3ZDLGtCQUFrQjtBQUN0QjtBQUVBLElBQXFCLFdBQXJCLGNBQXNDLHVCQUFPO0FBQUEsRUFLekMsTUFBTSxTQUFTO0FBQ1gsVUFBTSxLQUFLLGFBQWE7QUFHeEIsUUFBSSxLQUFLLFNBQVMsa0JBQWtCO0FBQ2hDLFdBQUssdUJBQXVCLEtBQUssaUJBQWlCO0FBQ2xELFdBQUsscUJBQXFCLFFBQVEsc0JBQXNCO0FBQUEsSUFDNUQ7QUFDQSxTQUFLLGFBQWE7QUFJbEIsU0FBSyxXQUFXO0FBQUEsTUFDWixJQUFJO0FBQUEsTUFDSixNQUFNO0FBQUEsTUFDTixVQUFVLE1BQU07QUFDWixhQUFLLGFBQWE7QUFBQSxNQUN0QjtBQUFBLElBQ0osQ0FBQztBQUdELFNBQUssY0FBYyxVQUFVLFlBQVksTUFBTTtBQUMzQyxXQUFLLGFBQWE7QUFBQSxJQUN0QixDQUFDO0FBR0QsU0FBSyxjQUFjLElBQUksWUFBWSxLQUFLLEtBQUssSUFBSSxDQUFDO0FBQUEsRUFFdEQ7QUFBQSxFQUVBLFdBQVc7QUFBQSxFQUVYO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFDakIsU0FBSyxXQUFXLE9BQU8sT0FBTyxDQUFDLEdBQUcsa0JBQWtCLE1BQU0sS0FBSyxTQUFTLENBQUM7QUFBQSxFQUM3RTtBQUFBLEVBRUEsTUFBTSxlQUFlO0FBQ2pCLFVBQU0sS0FBSyxTQUFTLEtBQUssUUFBUTtBQUFBLEVBQ3JDO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFHakIsVUFBTSxtQkFBbUIsTUFBTSxVQUFVO0FBRXpDLFFBQUksdUJBQU8sa0JBQWtCO0FBQzdCLFNBQUssY0FBYztBQUNuQixTQUFLLGlCQUFpQjtBQUV0QixxQkFBaUIsR0FBRyxTQUFTLE1BQU07QUFDL0IsVUFBSSx1QkFBTyxpQkFBaUI7QUFDNUIsV0FBSyxjQUFjO0FBQ25CLFdBQUssaUJBQWlCO0FBQUEsSUFDMUIsQ0FBQztBQUFBLEVBQ0w7QUFBQSxFQUVBLE1BQU0sbUJBQW1CO0FBR3JCLFFBQUksZ0JBQWdCO0FBQ3BCLFFBQUksS0FBSyxTQUFTLGtCQUFrQjtBQUNoQyxVQUFJLEtBQUssYUFBYSxHQUFHO0FBQ3JCLHdCQUFnQjtBQUFBLE1BQ3BCLE9BQ0s7QUFDRCx3QkFBZ0I7QUFBQSxNQUNwQjtBQUNBLFdBQUsscUJBQXFCLFFBQVEsYUFBYTtBQUFBLElBQ25ELE9BQ0s7QUFDRCxXQUFLLHFCQUFxQixRQUFRLEVBQUU7QUFBQSxJQUN4QztBQUFBLEVBRUo7QUFDSjtBQUVBLElBQU0sY0FBTixjQUEwQixpQ0FBaUI7QUFBQSxFQUd2QyxZQUFZLEtBQVUsUUFBa0I7QUFDcEMsVUFBTSxLQUFLLE1BQU07QUFDakIsU0FBSyxTQUFTO0FBQUEsRUFDbEI7QUFBQSxFQUVBLFVBQWdCO0FBQ1osVUFBTSxFQUFFLFlBQVksSUFBSTtBQUV4QixnQkFBWSxNQUFNO0FBRWxCLFFBQUksd0JBQVEsV0FBVyxFQUNsQixRQUFRLDJCQUEyQixFQUNuQyxRQUFRLDhFQUE4RSxFQUN0RjtBQUFBLE1BQVUsQ0FBQyxXQUNSLE9BQ0ssU0FBUyxLQUFLLE9BQU8sU0FBUyxnQkFBZ0IsRUFDOUMsU0FBUyxPQUFPLFVBQVU7QUFDdkIsYUFBSyxPQUFPLFNBQVMsbUJBQW1CO0FBQ3hDLGFBQUssT0FBTyxpQkFBaUI7QUFDN0IsY0FBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLE1BQ25DLENBQUM7QUFBQSxJQUNUO0FBQUEsRUFDUjtBQUNKOyIsCiAgIm5hbWVzIjogW10KfQo=
